{"version":3,"file":"static/js/111.5522ce6b.chunk.js","mappings":"ySAEaA,EAASC,EAAAA,EAAAA,OAAH,wlBA2BNC,EAAcD,EAAAA,EAAAA,KAAH,sFAMXE,EAAQF,EAAAA,EAAAA,MAAH,4CAILG,EAAQH,EAAAA,EAAAA,MAAH,4CAILI,EAAaJ,EAAAA,EAAAA,EAAH,kE,oGCvCjBK,GAAOC,EAAAA,EAAAA,IAAH,qGASGC,GAAU,OAAOC,EAAAA,IAAP,sBAAH,aACLH,EADK,2BAIpBE,EAAQE,aAAe,CACrBC,KAAM,G,oLCHFC,EAASC,EAAAA,GACL,CACNC,MAAOD,EAAAA,KAEJC,MAAM,+BACNC,SAAS,qBACZC,SAAUH,EAAAA,KAAaE,SAAS,0BAEjCA,WAEUE,EAAY,WAAO,IAAD,MACvBC,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IAEhC,GAIIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYb,KAJtBc,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OAef,OACE,gBACEE,MAAO,CACLC,MAAO,QACPC,WAAY,OACZC,YAAa,QAJjB,UAOE,UAAC,KAAD,CAAaC,SAAUP,GAlBZ,SAAAQ,GACbC,QAAQC,IAAIF,GACZjB,GACEoB,EAAAA,EAAAA,IAAM,CACJxB,MAAOqB,EAAKrB,MACZE,SAAUmB,EAAKnB,WAGpB,IAUG,WACE,UAAC,KAAD,qBACQ,SAAC,MAAD,kBAAWU,EAAS,UAApB,IAA8Ba,YAAY,uBAChD,SAAC,KAAD,oBAAaX,EAAOd,aAApB,aAAa,EAAc0B,cAE7B,UAAC,KAAD,sBACW,KACT,SAAC,MAAD,gBACEC,KAAK,YACDf,EAAS,aAFf,IAGEa,YAAY,gBAEd,SAAC,KAAD,oBAAaX,EAAOZ,gBAApB,aAAa,EAAiBwB,cAGhC,iCAAIZ,EAAOc,cAAX,aAAI,EAAeF,UACjBpB,IAAe,SAAC,KAAD,CAAQqB,KAAK,SAAb,UAAuB,SAACjC,EAAA,EAAD,QACtC,SAAC,KAAD,CAAQiC,KAAK,SAAb,wBAKT,EC1Ec,SAASE,IACtB,OACE,4BACE,SAACC,EAAA,EAAD,WACE,wCAEF,SAAC3B,EAAD,MAGL,C","sources":["components/Form/Form.styled.jsx","components/Loader/Spinner.jsx","components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  width: 100px;\n  height: 40px;\n  margin-top: 10px;\n  display: block;\n  text-decoration: none;\n  border: 2px solid #e8f0f7;\n  border-radius: 3px;\n  text-align: center;\n\n  overflow: hidden;\n  font-size: 15px;\n  line-height: 20px;\n  color: #fff;\n  font-weight: bold;\n  text-transform: uppercase;\n  font-family: 'Roboto Condensed', Ð¢ahoma, sans-serif;\n  background: #e7473c;\n  transition: box-shadow 0.3s, transform 0.3s;\n  cursor: pointer;\n  z-index: 1;\n\n  :hover {\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2), 0 16px 20px rgba(0, 0, 0, 0.2);\n  }\n`;\n\nexport const FormContent = styled.form`\n  width: 505px;\n  margin-left: 15px;\n  margin-right: auto;\n`;\n\nexport const Input = styled.input`\n  font-size: 20px;\n`;\n\nexport const Label = styled.label`\n  font-size: 20px;\n`;\n\nexport const Validation = styled.p`\n  font-size: 14px;\n  margin-bottom: 8px;\n`;\n","import styled from '@emotion/styled/macro';\nimport { keyframes } from '@emotion/react';\nimport { CgSpinner } from 'react-icons/cg';\n\nconst spin = keyframes`\n0% {\n  transform: rotate(0deg);\n}\n100% {\n  transform: rotate(1turn);\n}\n`;\n\nexport const Spinner = styled(CgSpinner)`\n  animation: ${spin} 0.85s linear infinite;\n`;\n\nSpinner.defaultProps = {\n  size: 35,\n};\n","import { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Button,\n  FormContent,\n  Input,\n  Label,\n  Validation,\n} from '../Form/Form.styled';\nimport { logIn } from '../redux/Auth/operations';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { selectIsLoadingUser } from 'components/redux/Auth/selectors';\nimport { Spinner } from 'components/Loader/Spinner';\n\nconst schema = yup\n  .object({\n    email: yup\n      .string()\n      .email('Plaese, enter a valid email')\n      .required('Email is required'),\n    password: yup.string().required('Password is required'),\n  })\n  .required();\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const userLoading = useSelector(selectIsLoadingUser);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const submit = data => {\n    console.log(data);\n    dispatch(\n      logIn({\n        email: data.email,\n        password: data.password,\n      })\n    );\n  };\n\n  return (\n    <div\n      style={{\n        width: '505px',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n      }}\n    >\n      <FormContent onSubmit={handleSubmit(submit)}>\n        <Label>\n          Email <Input {...register('email')} placeholder=\"qwerty@gmail.com\" />\n          <Validation>{errors.email?.message}</Validation>\n        </Label>\n        <Label>\n          Password{' '}\n          <Input\n            type=\"password\"\n            {...register('password')}\n            placeholder=\"Friday_13\"\n          />\n          <Validation>{errors.password?.message}</Validation>\n        </Label>\n\n        <p>{errors.number?.message}</p>\n        {(userLoading && <Button type=\"submit\">{<Spinner />}</Button>) || (\n          <Button type=\"submit\">Log In</Button>\n        )}\n      </FormContent>\n    </div>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <div>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </div>\n  );\n}\n"],"names":["Button","styled","FormContent","Input","Label","Validation","spin","keyframes","Spinner","CgSpinner","defaultProps","size","schema","yup","email","required","password","LoginForm","dispatch","useDispatch","userLoading","useSelector","selectIsLoadingUser","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","style","width","marginLeft","marginRight","onSubmit","data","console","log","logIn","placeholder","message","type","number","Login","Helmet"],"sourceRoot":""}